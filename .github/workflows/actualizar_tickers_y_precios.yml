name: Update tickers & prices (TradingView + Yahoo â†’ Snowflake)

on:
  schedule:
    - cron: '20 5 * * *'   # 05:20 UTC (07:20 Madrid aprox.)
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TZ: Europe/Madrid
      # Secrets necesarios
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}   # p.ej. YAHOO_PRUEBA
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}       # p.ej. IBEX
      # SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}         # opcional

      # Tablas / parÃ¡metros (puedes dejarlos asÃ­ o moverlos a secrets/vars)
      TICKERS_TABLE: TFM.YAHOO_FINANCE.LISTA_TICKERS
      PRICES_TABLE:  TFM.YAHOO_FINANCE.TICKERS_INDEX
      PROFILE_TABLE: TFM.YAHOO_FINANCE.COMPANY_PROFILE
      START_DATE: '2020-01-01'

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Validate required secrets
        run: |
          [ -n "$SNOWFLAKE_ACCOUNT" ] || (echo "ERROR: SNOWFLAKE_ACCOUNT is empty" && exit 1)
          [ -n "$SNOWFLAKE_USER" ] || (echo "ERROR: SNOWFLAKE_USER is empty" && exit 1)
          [ -n "$SNOWFLAKE_PASSWORD" ] || (echo "ERROR: SNOWFLAKE_PASSWORD is empty" && exit 1)
          [ -n "$SNOWFLAKE_DATABASE" ] || (echo "ERROR: SNOWFLAKE_DATABASE is empty" && exit 1)
          [ -n "$SNOWFLAKE_SCHEMA" ] || (echo "ERROR: SNOWFLAKE_SCHEMA is empty" && exit 1)

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps (incl. write_pandas)
        run: |
          python -m pip install --upgrade pip
          pip install "pandas>=2.0,<2.3" "snowflake-connector-python[pandas]>=3.5.0" pyarrow
          pip install requests beautifulsoup4 lxml yfinance

      - name: Snowflake connection test
        run: |
          python - <<'PY'
          import os, snowflake.connector
          con = snowflake.connector.connect(
            user=os.environ['SNOWFLAKE_USER'],
            password=os.environ['SNOWFLAKE_PASSWORD'],
            account=os.environ['SNOWFLAKE_ACCOUNT'],
            warehouse=os.environ['SNOWFLAKE_WAREHOUSE'],
            database=os.environ['SNOWFLAKE_DATABASE'],
            schema=os.environ['SNOWFLAKE_SCHEMA'],
            role=os.environ.get('SNOWFLAKE_ROLE')
          )
          cur = con.cursor()
          cur.execute("select current_user(), current_account(), current_database(), current_schema()")
          print("Connected as:", cur.fetchone())
          cur.close(); con.close()
          PY

      - name: Run update (tickers + incremental prices)
        working-directory: Yahoo_prueba
        run: |
          test -f tickers_precios_global.py || (echo "Falta Yahoo_prueba/tickers_precios_global.py" && exit 1)
          python tickers_precios_global.py

      - name: Update company profiles (sector/industria/empleados/...)
        working-directory: Yahoo_prueba
        run: |
          test -f perfil_empresas.py || (echo "Falta Yahoo_prueba/perfil_empresas.py" && exit 1)
          python perfil_empresas.py

      - name: Update index daily OHLC (IBEX/DAX/CAC/MIB/AEX/FTSE/OMXS30/SMI)
        env:
          INDEX_TABLE: TFM.YAHOO_FINANCE.INDEX_DAILY
          START_DATE: '2020-01-01'
        run: |
          test -f Yahoo_prueba/indices_diarios.py || (echo "Falta Yahoo_prueba/indices_diarios.py" && exit 1)
          python Yahoo_prueba/indices_diarios.py

      - name: Update annual financial summary (2021..last closed year)
        working-directory: Yahoo_prueba
        env:
          SUMMARY_TABLE:  TFM.YAHOO_FINANCE.FIN_SUMMARY_MAIN
          SUMMARY_START_YEAR: '2021'
        run: |
          test -f financieros_resumen_anual.py || (echo "Falta Yahoo_prueba/financieros_resumen_anual.py" && exit 1)
          python financieros_resumen_anual.py
          
      - name: Update market snapshot (non-historical ratios)
        working-directory: Yahoo_prueba
        env:
          SNAPSHOT_TABLE: TFM.YAHOO_FINANCE.FIN_MARKET_SNAPSHOT
          SNAPSHOT_MAX_WORKERS: '8'
          SNAPSHOT_SLEEP: '0.05'
        run: |
          test -f financieros_snapshot.py || (echo "Falta Yahoo_prueba/financieros_snapshot.py" && exit 1)
          python financieros_snapshot.py

      - name: Update ESG snapshot
        working-directory: Yahoo_prueba
        env:
          ESG_TABLE: TFM.YAHOO_FINANCE.FIN_ESG_SNAPSHOT
          ESG_MAX_WORKERS: '8'
          ESG_SLEEP: '0.05'
        run: |
          test -f financieros_esg_snapshot.py || (echo "Falta Yahoo_prueba/financieros_esg_snapshot.py" && exit 1)
          python financieros_esg_snapshot.py

      - name: Append market snapshot history (daily)
        working-directory: Yahoo_prueba
        env:
          SNAPSHOT_HIST_TABLE: TFM.YAHOO_FINANCE.FIN_MARKET_SNAPSHOT_HIST
          SNAPSHOT_MAX_WORKERS: '8'
          SNAPSHOT_SLEEP: '0.05'
        run: |
          test -f financieros_snapshot_hist.py || (echo "Falta Yahoo_prueba/financieros_snapshot_hist.py" && exit 1)
          python financieros_snapshot_hist.py

      - name: Append ESG snapshot history (daily)
        working-directory: Yahoo_prueba
        env:
          ESG_HIST_TABLE: TFM.YAHOO_FINANCE.FIN_ESG_SNAPSHOT_HIST
          ESG_MAX_WORKERS: '8'
          ESG_SLEEP: '0.05'
        run: |
          test -f financieros_esg_snapshot_hist.py || (echo "Falta Yahoo_prueba/financieros_esg_snapshot_hist.py" && exit 1)
          python financieros_esg_snapshot_hist.py

      # ðŸ”” Disparar flujo de confirmaciÃ³n en n8n: /webhook/yahoo_finance
      - name: Trigger n8n confirm flow (yahoo_finance)
        if: success()   # usa 'always()' si quieres dispararlo aunque falle algo
        env:
          N8N_URL: ${{ secrets.N8N_URL }}                # ej. https://tu-dominio.tld  (o https://tu-dominio.tld/n8n)
          N8N_WEBHOOK_SECRET: ${{ secrets.N8N_WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          curl -sS --fail --retry 3 -X POST "$N8N_URL/webhook/yahoo_finance" \
            -H "Content-Type: application/json" \
            -H "x-n8n-secret: $N8N_WEBHOOK_SECRET" \
            --data @- <<'JSON'
          {
            "status": "success",
            "mensaje": "ðŸš€ Disparando flujo de confirmaciÃ³n TFM.YAHOO_FINANCE desde GitHub Actions",
            "dataset": "TFM.YAHOO_FINANCE",
            "run_id": "${{ github.run_id }}",
            "workflow": "${{ github.workflow }}",
            "repository": "${{ github.repository }}",
            "sha": "${{ github.sha }}",
            "started_at": "${{ github.run_started_at }}"
          }
          JSON
