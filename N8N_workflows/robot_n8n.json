{
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "4e75487a-9b2f-4f7e-a310-513a35c05ac0",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -816,
        384
      ],
      "webhookId": "665c0194-596f-45ad-9cb4-a34076b16ad7",
      "credentials": {
        "telegramApi": {
          "id": "V8K7TQJIMzv5IHkg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Entrada: Telegram Trigger\nconst msg = $json.message ?? {};\nconst txt = (msg.text ?? '').trim();\nconst chatId = msg.chat?.id;\n\nif (!txt) {\n  return [{ chatId, reply: \"Envíame una pregunta, p. ej.: 'Cierre medio de SAN en 2024'.\" }];\n}\n\nif (['/start','/help'].includes(txt.toLowerCase())) {\n  const help = [\n    \"¡Hola! Puedo responder consultas sobre tus tablas en Snowflake.\",\n    \"Ejemplos:\",\n    \"• Cierre medio de SAN en 2024\",\n    \"• Volumen por día de BBVA la última semana\",\n    \"\",\n    \"Consejos: sé concreto; yo convierto tu texto a SQL SOLO SELECT, con LIMIT automático.\"\n  ].join('\\n');\n  return [{ chatId, reply: help }];\n}\n\nreturn [{ chatId, userQuery: txt }];"
      },
      "id": "9c20b656-bc54-4b9d-b9a4-63e03751a536",
      "name": "Normalizar preguntas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        384
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un asistente que genera SQL SOLO SELECT para Snowflake.\n\nTablas y columnas (nombres totalmente calificados):\n- TFM.YAHOO_FINANCE.INDEX_DAILY: [SYMBOL, MARKET, INDEX_NAME,PAIS, FECHA, OPEN, HIGH, LOW, CLOSE]\n\nReglas:\n- Devuelve SOLO el SQL, sin explicaciones y sin bloques ``` .\n- Nada de DDL/DML ni COPY/PUT/CALL/ALTER/GRANT/TRUNCATE.\n- Si el usuario pide “precio”, usa la columna CLOSE.\n- Si el usuario da un NOMBRE de empresa (p. ej. \"Santander\"), filtra con:\n  (NOMBRE ILIKE '%<nombre>%' OR SYMBOL ILIKE '<prefijo>%')\n- “final de AAAA” significa: último día hábil de ese año ⇒ usa\n  FECHA <= 'AAAA-12-31' ORDER BY FECHA DESC LIMIT 1\n- “últimos N” ⇒ ORDER BY FECHA DESC LIMIT N\n- Si puedes resolverlo, devuelve el SQL. Si no, responde exactamente: __NO-SQL__.\n\nEjemplos:\nUSUARIO: precio de santander al final del 2024\nSQL:\nSELECT CLOSE AS precio_cierre, FECHA, SYMBOL\nFROM TFM.YAHOO_FINANCE.INDEX_DAILY\nWHERE (NOMBRE ILIKE '%santander%' OR SYMBOL LIMIT 1;\n\nUSUARIO: últimos 5 cierres de SAN\nSQL:\nSELECT FECHA, CLOSE, SYMBOL\nFROM TFM.YAHOO_FINANCE.INDEX_DAILY\nWHERE SYMBOL ILIKE 'SAN%'\nORDER BY FECHA DESC\nLIMIT 5;\n"
            },
            {
              "content": "={{$json.userQuery}}"
            }
          ]
        },
        "options": {}
      },
      "id": "d2529264-1b37-4c90-a154-0617176bba95",
      "name": "Message a model",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -416,
        384
      ],
      "credentials": {
        "openAiApi": {
          "id": "qp6pI2efrXja70z2",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1) Extraer el contenido de OpenAI en múltiples formatos (tu caso: message.content)\nlet raw =\n  $json.sql ??\n  $json.text ??\n  $json.response ??\n  $json.content ??\n  $json.message?.content ??            // <-- TU CASO\n  $json.choices?.[0]?.message?.content ??\n  $json.messages?.[0]?.content ??\n  '';\n\nif (typeof raw !== 'string') raw = String(raw ?? '');\n\n// 2) Limpiar fences y ; finales, y normalizar saltos/tabuladores\nlet sql = raw.trim()\n  .replace(/^```(?:sql)?\\s*/i, '')\n  .replace(/```$/i, '')\n  .replace(/;+$/,'')\n  .trim()\n  .replace(/\\\\r\\\\n/g, '\\n')\n  .replace(/\\\\n/g, '\\n')\n  .replace(/\\\\t/g, '\\t')\n  .trim();\n\n// 3) Validaciones\nif (!sql || sql.includes('__NO-SQL__')) {\n  return [{ json: { error: 'No puedo responder con las tablas disponibles. Reformula o revisa el catálogo.' } }];\n}\nif (!/^select\\b/i.test(sql)) {\n  return [{ json: { error: 'Solo se permiten consultas SELECT.', sqlSuggested: sql } }];\n}\n\nconst forbidden = /\\b(insert|update|delete|merge|alter|drop|create|copy|call|grant|revoke|truncate|put|get|execute)\\b/i;\nif (forbidden.test(sql)) {\n  return [{ json: { error: 'Se detectaron instrucciones no permitidas.', sqlSuggested: sql } }];\n}\nif (/--|\\/\\*/.test(sql)) {\n  return [{ json: { error: 'No se permiten comentarios en la consulta.', sqlSuggested: sql } }];\n}\nif (sql.split(';').length > 1) {\n  return [{ json: { error: 'Solo una sentencia SELECT por consulta.' } }];\n}\n\n// 4) Lista blanca\nconst allowed = ['INDEX_DAILY'];\nconst mentions = Array.from(sql.matchAll(/\\bfrom\\s+([A-Z0-9_\\.\"`]+)|\\bjoin\\s+([A-Z0-9_\\.\"`]+)/ig))\n  .flatMap(m => [m[1], m[2]]).filter(Boolean)\n  .map(t => t.replace(/[\"`]/g,'').split('.').pop().toUpperCase());\n\nif (mentions.some(t => !allowed.includes(t))) {\n  return [{ json: { error: 'La consulta referencia tablas no permitidas.', sqlSuggested: sql } }];\n}\n\n// 5) Añadir LIMIT si falta\nif (!/\\blimit\\s+\\d+/i.test(sql)) sql += ' LIMIT 50';\n\n// 6) Devolver SQL listo\nreturn [{ json: { sql } }];\n"
      },
      "id": "0451aed2-150f-4b0b-8bf5-093f3b1fe830",
      "name": "Validar y limitar SQL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        384
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.sql && $json.sql.trim().length > 0 ? $json.sql : 'SELECT 1 WHERE 1=0' }}"
      },
      "id": "63bb7286-f804-4ec5-b61e-9da374504892",
      "name": "Snowflake",
      "type": "n8n-nodes-base.snowflake",
      "typeVersion": 1,
      "position": [
        320,
        288
      ],
      "alwaysOutputData": true,
      "credentials": {
        "snowflake": {
          "id": "XmoC8FIefMMahYGi",
          "name": "Snowflake account 2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "function esc(s) {\n  return String(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n// 1) Error desde el validador\nif ($json.error) {\n  const msg = `<b>Error:</b> ${esc($json.error)}`\n    + ($json.sqlSuggested ? `<br/><pre>${esc($json.sqlSuggested)}</pre>` : '');\n  return [{ html: msg }];\n}\n\n// 2) ¿Snowflake marcó error? (con Continue On Fail)\nconst incoming = $input.all();\nconst hasFail = incoming.some(i => i.json?.error || i.json?.executionStatus === 'error');\nif (hasFail) {\n  const err = incoming.find(i => i.json?.error)?.json?.error || 'Error al ejecutar la consulta.';\n  return [{ html: `<b>Error:</b> <pre>${esc(err)}</pre>` }];\n}\n\n// 3) Filas OK\nconst rows = incoming.map(i => i.json);\nif (!rows.length) {\n  return [{ html: '<i>Sin resultados</i>' }];\n}\n\nconst headers = Object.keys(rows[0]);\nconst lines = [headers.join('\\t'), ...rows.map(r => headers.map(h => String(r[h] ?? '')).join('\\t'))];\nlet body = `<pre>${esc(lines.join('\\n'))}</pre>`;\n\n// Recupera el SQL del validador\nconst sql = $prevNode['Validar y limitar SQL']?.json?.sql ?? '';\n\n// Evitar romper el límite de 4096 chars de Telegram\nconst MAX = 3500;\nlet html = (sql ? `<b>SQL ejecutado</b>\\n<pre>${esc(sql)}</pre>` : '') + `<b>Resultados</b>\\n${body}`;\nif (html.length > MAX) {\n  html = html.slice(0, MAX) + '\\n… (salida truncada)';\n}\n\nreturn [{ html }];"
      },
      "id": "a92f9a79-8e07-45b6-9997-cd50bfb39629",
      "name": "Formatear HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        400
      ]
    },
    {
      "parameters": {
        "chatId": "={{$prevNode[\"Normalizar preguntas\"].json.chatId || $json.chatId || $json.message?.chat?.id}}",
        "text": "={{$json.html || $json.reply}}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "de1b11ac-6d34-4bb9-b535-3f6b11965022",
      "name": "Send a text message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        688,
        400
      ],
      "webhookId": "10105ba4-6226-46a5-a428-31e376ad4ad0",
      "credentials": {
        "telegramApi": {
          "id": "V8K7TQJIMzv5IHkg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bd5fe977-b88b-495a-9d20-2d0d9faf2339",
              "leftValue": "={{ ($json.sql || '').trim() }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        144,
        384
      ],
      "id": "8d798c58-510b-4713-b04a-e66dcbe89e10",
      "name": "¿Tiene SQL?"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Normalizar preguntas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalizar preguntas": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Validar y limitar SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar y limitar SQL": {
      "main": [
        [
          {
            "node": "¿Tiene SQL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Snowflake": {
      "main": [
        [
          {
            "node": "Formatear HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatear HTML": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Tiene SQL?": {
      "main": [
        [
          {
            "node": "Snowflake",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Formatear HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d629a5505b3cbcb54160b70f2271634ee6b9bfcfe28d543ea1719d3934ac71d5"
  }
}