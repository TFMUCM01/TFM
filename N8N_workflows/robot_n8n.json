{
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "4e75487a-9b2f-4f7e-a310-513a35c05ac0",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -832,
        384
      ],
      "webhookId": "665c0194-596f-45ad-9cb4-a34076b16ad7",
      "credentials": {
        "telegramApi": {
          "id": "V8K7TQJIMzv5IHkg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Eres un asistente que genera SQL para Snowflake de las siguiente tablas.\n\nTablas y columnas (nombres totalmente calificados):\n- TFM.YAHOO_FINANCE.TICKERS_INDEX (tabla de acciones de empresas): [TICKER, CLOSE,HIGH,LOW,OPEN,VOLUME,FECHA]\n- TFM.YAHOO_FINANCE.INDEX_DAILY (tabla de mercado de valores totales): [SYMBOL,MARKET,INDEX_NAME,PAIS,FECHA,OPEN.HIGH,LOW,CLOSE]\n- TFM.YAHOO_FINANCE.FIN_SUMMARY_MAIN(tabla de indicadores financieros anules de acciones de empresas): [TICKER,YEAR,ASSETS,LIABILITIES,EQUITY,REVENUE,EXPENSES,NET_INCOME,OPERATING_CF,INVESTING_CF,FINANCING_CF,FREE_CF,NET_MARGIN,ROA,ROE,DEBT_EQUITY]\n- TFM.YAHOO_FINANCE.COMPANY_PROFILE (tabla de informacion de las acciones de empresas): [TICKER,NOMBRE,SECTOR,INDUSTRIA,EMPLEADOS,PAIS,CIUDAD,DIRECCION,WEBSITE,TELEFONO,MONEDA,EXCHANGE,MARKET_CAP,RESUMEN]\n\nReglas:\n- Devuelve SOLO el SQL, sin explicaciones y sin bloques para que snowflake lo ejecute directamente y sin saltos de linea.\n- Si el usuario pide “precio”, usa la columna CLOSE.\n- Si necesitas ahcer un JOIN netre tablas utiliza la columna TICKER para empresas.\n- Si necesitas hacer un JOIN netre empresa y mercado utiliza la columna PAIS.\n- Si el usuario da un NOMBRE de empresa (p. ej. \"Santander\"), filtra con:\n  (NOMBRE ILIKE '%<nombre>%' OR SYMBOL ILIKE '<prefijo>%')\n- “final de AAAA” significa: último día hábil de ese año. Utiliza:\n  FECHA <= 'AAAA-12-31' ORDER BY FECHA DESC LIMIT 1\n- “últimos N” ⇒ ORDER BY FECHA DESC LIMIT N\n- Si puedes resolverlo, devuelve el SQL. Si no, responde exactamente: __NO-SQL__."
            },
            {
              "content": "={{ $json.message?.text ?? $json.message?.caption ?? '' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d2529264-1b37-4c90-a154-0617176bba95",
      "name": "Message a model",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -608,
        384
      ],
      "credentials": {
        "openAiApi": {
          "id": "qp6pI2efrXja70z2",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.message.content }}"
      },
      "id": "63bb7286-f804-4ec5-b61e-9da374504892",
      "name": "Snowflake",
      "type": "n8n-nodes-base.snowflake",
      "typeVersion": 1,
      "position": [
        16,
        272
      ],
      "alwaysOutputData": true,
      "credentials": {
        "snowflake": {
          "id": "XmoC8FIefMMahYGi",
          "name": "Snowflake account 2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// -------- Config --------\nconst SHOW_SQL = true;      // mostrar el SQL ejecutado arriba del resultado\nconst MAX = 3500;           // límite seguro por mensaje (Telegram ~4096)\n\n// -------- Helpers --------\nfunction esc(s) {\n  return String(s ?? '')\n    .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n}\nfunction pad(s, w) {\n  s = String(s ?? '');\n  return s.length >= w ? s : s + ' '.repeat(w - s.length);\n}\n\n// 1) Filas de Snowflake (todas las que lleguen)\nconst rows = $input.all().map(i => i.json);\n\n// 2) SQL ejecutado (del nodo OpenAI)\nconst rawSql = $items('Message a model')[0]?.json?.message?.content ?? '';\nconst shownSql = rawSql\n  .replace(/^```(?:sql)?\\s*/i,'').replace(/```$/i,'')  // por si el modelo usa fences\n  .replace(/\\\\r\\\\n/g,'\\n').replace(/\\\\n/g,'\\n').replace(/\\\\t/g,'\\t')\n  .trim();\n\nconst headSql = SHOW_SQL && shownSql ? `<b>SQL ejecutado</b>\\n<pre>${esc(shownSql)}</pre>\\n` : '';\n\n// 3) Sin resultados\nif (!rows.length) {\n  return [{ json: { html: `${headSql}<i>Sin resultados</i>` } }];\n}\n\n// 4) Columnas dinámicas (unión de todas las claves)\nconst cols = [];\nfor (const r of rows) for (const k of Object.keys(r)) if (!cols.includes(k)) cols.push(k);\n\n// 5) Anchos por columna para alinear en <pre>\nconst widths = cols.map(c => Math.max(c.length, ...rows.map(r => String(r[c] ?? '').length)));\n\n// 6) Construir tabla en texto monoespaciado\nconst header = cols.map((c,i) => pad(c, widths[i])).join('  ');\nconst sep    = cols.map((c,i) => '-'.repeat(widths[i])).join('  ');\nconst lines  = [header, sep, ...rows.map(r => cols.map((c,i) => pad(r[c] ?? '', widths[i])).join('  '))];\n\n// 7) Partir en varios mensajes si excede el límite\nconst prefix = `<b>Resultados (${rows.length} filas)</b>\\n`;\n\nlet chunks = [];\nlet buf = '';\nfor (const ln of lines) {\n  const toAdd = ln + '\\n';\n  const reserve = buf === '' ? (headSql.length + prefix.length) : 0;\n  if ((buf.length + toAdd.length + reserve) > MAX) {\n    chunks.push(buf);\n    buf = '';\n  }\n  buf += toAdd;\n}\nif (buf) chunks.push(buf);\n\n// 8) Emitir items: primer chunk incluye SQL\nconst out = chunks.map((block, i) => {\n  const top = (i === 0 ? headSql : '') + prefix;\n  const html = top + `<pre>${esc(block)}</pre>`;\n  return { json: { html } };\n});\n\nreturn out;\n"
      },
      "id": "a92f9a79-8e07-45b6-9997-cd50bfb39629",
      "name": "Formatear HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        384
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $items('Telegram Trigger')[0].json.message.chat.id }}",
        "text": "={{ $json.html }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "de1b11ac-6d34-4bb9-b535-3f6b11965022",
      "name": "Send a text message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        464,
        384
      ],
      "webhookId": "10105ba4-6226-46a5-a428-31e376ad4ad0",
      "credentials": {
        "telegramApi": {
          "id": "V8K7TQJIMzv5IHkg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bd5fe977-b88b-495a-9d20-2d0d9faf2339",
              "leftValue": "={{ $json.message.content }}",
              "rightValue": "__NO-SQL__",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -208,
        384
      ],
      "id": "8d798c58-510b-4713-b04a-e66dcbe89e10",
      "name": "¿Tiene SQL?"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "¿Tiene SQL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Snowflake": {
      "main": [
        [
          {
            "node": "Formatear HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatear HTML": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Tiene SQL?": {
      "main": [
        [
          {
            "node": "Snowflake",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Formatear HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d629a5505b3cbcb54160b70f2271634ee6b9bfcfe28d543ea1719d3934ac71d5"
  }
}